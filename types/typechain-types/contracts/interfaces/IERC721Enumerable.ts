/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers6'
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from '../../common'

export interface IERC721EnumerableInterface extends Interface {
  getFunction(
    nameOrSignature: 'tokenByIndex' | 'tokenOfOwnerByIndex' | 'totalSupply'
  ): FunctionFragment

  encodeFunctionData(
    functionFragment: 'tokenByIndex',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'tokenOfOwnerByIndex',
    values: [AddressLike, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'totalSupply',
    values?: undefined
  ): string

  decodeFunctionResult(
    functionFragment: 'tokenByIndex',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'tokenOfOwnerByIndex',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result
}

export interface IERC721Enumerable extends BaseContract {
  connect(runner?: ContractRunner | null): IERC721Enumerable
  waitForDeployment(): Promise<this>

  interface: IERC721EnumerableInterface

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>

  tokenByIndex: TypedContractMethod<[index: BigNumberish], [bigint], 'view'>

  tokenOfOwnerByIndex: TypedContractMethod<
    [owner: AddressLike, index: BigNumberish],
    [bigint],
    'view'
  >

  totalSupply: TypedContractMethod<[], [bigint], 'view'>

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T

  getFunction(
    nameOrSignature: 'tokenByIndex'
  ): TypedContractMethod<[index: BigNumberish], [bigint], 'view'>
  getFunction(
    nameOrSignature: 'tokenOfOwnerByIndex'
  ): TypedContractMethod<
    [owner: AddressLike, index: BigNumberish],
    [bigint],
    'view'
  >
  getFunction(
    nameOrSignature: 'totalSupply'
  ): TypedContractMethod<[], [bigint], 'view'>

  filters: {}
}

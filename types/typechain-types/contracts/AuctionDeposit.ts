/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers6'
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from '../common'

export declare namespace IAuctionDeposit {
  export type DepositInfoStruct = { user: AddressLike; amount: BigNumberish }

  export type DepositInfoStructOutput = [user: string, amount: bigint] & {
    user: string
    amount: bigint
  }
}

export declare namespace IMonoNFT {
  export type ShareOfCommunityTokenStruct = {
    shareHolder: AddressLike
    shareRatio: BigNumberish
  }

  export type ShareOfCommunityTokenStructOutput = [
    shareHolder: string,
    shareRatio: bigint
  ] & { shareHolder: string; shareRatio: bigint }
}

export interface AuctionDepositInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'auctionAdminAddr'
      | 'communityTokenAddr'
      | 'deposit'
      | 'getAllDeposit'
      | 'getDepositByAddress'
      | 'initialize'
      | 'lock'
      | 'locked'
      | 'maxDeposit'
      | 'monoNFTAddr'
      | 'payForClaim'
      | 'setAuctionAdminAddress'
      | 'setCommunityTokenAddress'
      | 'setMonoNFTAddress'
      | 'unlock'
      | 'withdraw'
  ): FunctionFragment

  getEvent(
    nameOrSignatureOrTopic:
      | 'Deposit'
      | 'Initialized'
      | 'SendToTreasury'
      | 'Withdraw'
  ): EventFragment

  encodeFunctionData(
    functionFragment: 'auctionAdminAddr',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'communityTokenAddr',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getAllDeposit',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getDepositByAddress',
    values: [AddressLike]
  ): string
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [AddressLike]
  ): string
  encodeFunctionData(functionFragment: 'lock', values?: undefined): string
  encodeFunctionData(functionFragment: 'locked', values?: undefined): string
  encodeFunctionData(functionFragment: 'maxDeposit', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'monoNFTAddr',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'payForClaim',
    values: [AddressLike, BigNumberish, IMonoNFT.ShareOfCommunityTokenStruct[]]
  ): string
  encodeFunctionData(
    functionFragment: 'setAuctionAdminAddress',
    values: [AddressLike]
  ): string
  encodeFunctionData(
    functionFragment: 'setCommunityTokenAddress',
    values: [AddressLike]
  ): string
  encodeFunctionData(
    functionFragment: 'setMonoNFTAddress',
    values: [AddressLike]
  ): string
  encodeFunctionData(functionFragment: 'unlock', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [BigNumberish]
  ): string

  decodeFunctionResult(
    functionFragment: 'auctionAdminAddr',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'communityTokenAddr',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getAllDeposit',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getDepositByAddress',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'lock', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'locked', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'maxDeposit', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'monoNFTAddr', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'payForClaim', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'setAuctionAdminAddress',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setCommunityTokenAddress',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setMonoNFTAddress',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'unlock', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result
}

export namespace DepositEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish]
  export type OutputTuple = [user: string, amount: bigint]
  export interface OutputObject {
    user: string
    amount: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish]
  export type OutputTuple = [version: bigint]
  export interface OutputObject {
    version: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace SendToTreasuryEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish]
  export type OutputTuple = [user: string, amount: bigint]
  export interface OutputObject {
    user: string
    amount: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace WithdrawEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish]
  export type OutputTuple = [user: string, amount: bigint]
  export interface OutputObject {
    user: string
    amount: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export interface AuctionDeposit extends BaseContract {
  connect(runner?: ContractRunner | null): AuctionDeposit
  waitForDeployment(): Promise<this>

  interface: AuctionDepositInterface

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>

  auctionAdminAddr: TypedContractMethod<[], [string], 'view'>

  communityTokenAddr: TypedContractMethod<[], [string], 'view'>

  deposit: TypedContractMethod<[amount: BigNumberish], [void], 'nonpayable'>

  getAllDeposit: TypedContractMethod<
    [],
    [IAuctionDeposit.DepositInfoStructOutput[]],
    'view'
  >

  getDepositByAddress: TypedContractMethod<
    [user: AddressLike],
    [IAuctionDeposit.DepositInfoStructOutput],
    'view'
  >

  initialize: TypedContractMethod<
    [_monoNFTAddr: AddressLike],
    [void],
    'nonpayable'
  >

  lock: TypedContractMethod<[], [void], 'nonpayable'>

  locked: TypedContractMethod<[], [boolean], 'view'>

  maxDeposit: TypedContractMethod<[], [bigint], 'view'>

  monoNFTAddr: TypedContractMethod<[], [string], 'view'>

  payForClaim: TypedContractMethod<
    [
      from: AddressLike,
      amount: BigNumberish,
      sharesOfCommunityToken: IMonoNFT.ShareOfCommunityTokenStruct[]
    ],
    [void],
    'nonpayable'
  >

  setAuctionAdminAddress: TypedContractMethod<
    [_auctionAdminAddr: AddressLike],
    [void],
    'nonpayable'
  >

  setCommunityTokenAddress: TypedContractMethod<
    [_communityTokenAddr: AddressLike],
    [void],
    'nonpayable'
  >

  setMonoNFTAddress: TypedContractMethod<
    [_monoNFTAddr: AddressLike],
    [void],
    'nonpayable'
  >

  unlock: TypedContractMethod<[], [void], 'nonpayable'>

  withdraw: TypedContractMethod<[amount: BigNumberish], [void], 'nonpayable'>

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T

  getFunction(
    nameOrSignature: 'auctionAdminAddr'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'communityTokenAddr'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'deposit'
  ): TypedContractMethod<[amount: BigNumberish], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'getAllDeposit'
  ): TypedContractMethod<
    [],
    [IAuctionDeposit.DepositInfoStructOutput[]],
    'view'
  >
  getFunction(
    nameOrSignature: 'getDepositByAddress'
  ): TypedContractMethod<
    [user: AddressLike],
    [IAuctionDeposit.DepositInfoStructOutput],
    'view'
  >
  getFunction(
    nameOrSignature: 'initialize'
  ): TypedContractMethod<[_monoNFTAddr: AddressLike], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'lock'
  ): TypedContractMethod<[], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'locked'
  ): TypedContractMethod<[], [boolean], 'view'>
  getFunction(
    nameOrSignature: 'maxDeposit'
  ): TypedContractMethod<[], [bigint], 'view'>
  getFunction(
    nameOrSignature: 'monoNFTAddr'
  ): TypedContractMethod<[], [string], 'view'>
  getFunction(
    nameOrSignature: 'payForClaim'
  ): TypedContractMethod<
    [
      from: AddressLike,
      amount: BigNumberish,
      sharesOfCommunityToken: IMonoNFT.ShareOfCommunityTokenStruct[]
    ],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'setAuctionAdminAddress'
  ): TypedContractMethod<[_auctionAdminAddr: AddressLike], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'setCommunityTokenAddress'
  ): TypedContractMethod<
    [_communityTokenAddr: AddressLike],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'setMonoNFTAddress'
  ): TypedContractMethod<[_monoNFTAddr: AddressLike], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'unlock'
  ): TypedContractMethod<[], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'withdraw'
  ): TypedContractMethod<[amount: BigNumberish], [void], 'nonpayable'>

  getEvent(
    key: 'Deposit'
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >
  getEvent(
    key: 'Initialized'
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >
  getEvent(
    key: 'SendToTreasury'
  ): TypedContractEvent<
    SendToTreasuryEvent.InputTuple,
    SendToTreasuryEvent.OutputTuple,
    SendToTreasuryEvent.OutputObject
  >
  getEvent(
    key: 'Withdraw'
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >

  filters: {
    'Deposit(address,uint256)': TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >

    'Initialized(uint8)': TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >

    'SendToTreasury(address,uint256)': TypedContractEvent<
      SendToTreasuryEvent.InputTuple,
      SendToTreasuryEvent.OutputTuple,
      SendToTreasuryEvent.OutputObject
    >
    SendToTreasury: TypedContractEvent<
      SendToTreasuryEvent.InputTuple,
      SendToTreasuryEvent.OutputTuple,
      SendToTreasuryEvent.OutputObject
    >

    'Withdraw(address,uint256)': TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >
  }
}

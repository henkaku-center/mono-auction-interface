/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace IAuctionDeposit {
  export type DepositInfoStruct = { user: AddressLike; amount: BigNumberish };

  export type DepositInfoStructOutput = [user: string, amount: bigint] & {
    user: string;
    amount: bigint;
  };
}

export interface AuctionDepositInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "communityTokenAddr"
      | "deposit"
      | "getAllDeposit"
      | "getDepositByAddress"
      | "maxDeposit"
      | "monoNFTAddr"
      | "payForClaim"
      | "sendToTreasury"
      | "setCommunityTokenAddress"
      | "setMonoNFTAddress"
      | "setTreasuryAddress"
      | "treasuryAddr"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Deposit" | "SendToTreasury" | "Withdraw"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "communityTokenAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositByAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "monoNFTAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "payForClaim",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendToTreasury",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCommunityTokenAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMonoNFTAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasuryAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "communityTokenAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxDeposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "monoNFTAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payForClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendToTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCommunityTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMonoNFTAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace DepositEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SendToTreasuryEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AuctionDeposit extends BaseContract {
  connect(runner?: ContractRunner | null): AuctionDeposit;
  waitForDeployment(): Promise<this>;

  interface: AuctionDepositInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  communityTokenAddr: TypedContractMethod<[], [string], "view">;

  deposit: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  getAllDeposit: TypedContractMethod<
    [],
    [IAuctionDeposit.DepositInfoStructOutput[]],
    "view"
  >;

  getDepositByAddress: TypedContractMethod<
    [user: AddressLike],
    [IAuctionDeposit.DepositInfoStructOutput],
    "view"
  >;

  maxDeposit: TypedContractMethod<[], [bigint], "view">;

  monoNFTAddr: TypedContractMethod<[], [string], "view">;

  payForClaim: TypedContractMethod<
    [from: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  sendToTreasury: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setCommunityTokenAddress: TypedContractMethod<
    [_communityTokenAddr: AddressLike],
    [void],
    "nonpayable"
  >;

  setMonoNFTAddress: TypedContractMethod<
    [_monoNFTAddr: AddressLike],
    [void],
    "nonpayable"
  >;

  setTreasuryAddress: TypedContractMethod<
    [_treasuryAddr: AddressLike],
    [void],
    "nonpayable"
  >;

  treasuryAddr: TypedContractMethod<[], [string], "view">;

  withdraw: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "communityTokenAddr"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllDeposit"
  ): TypedContractMethod<
    [],
    [IAuctionDeposit.DepositInfoStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDepositByAddress"
  ): TypedContractMethod<
    [user: AddressLike],
    [IAuctionDeposit.DepositInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "maxDeposit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "monoNFTAddr"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "payForClaim"
  ): TypedContractMethod<
    [from: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sendToTreasury"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCommunityTokenAddress"
  ): TypedContractMethod<
    [_communityTokenAddr: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMonoNFTAddress"
  ): TypedContractMethod<[_monoNFTAddr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTreasuryAddress"
  ): TypedContractMethod<[_treasuryAddr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "treasuryAddr"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "SendToTreasury"
  ): TypedContractEvent<
    SendToTreasuryEvent.InputTuple,
    SendToTreasuryEvent.OutputTuple,
    SendToTreasuryEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "Deposit(address,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "SendToTreasury(address,uint256)": TypedContractEvent<
      SendToTreasuryEvent.InputTuple,
      SendToTreasuryEvent.OutputTuple,
      SendToTreasuryEvent.OutputObject
    >;
    SendToTreasury: TypedContractEvent<
      SendToTreasuryEvent.InputTuple,
      SendToTreasuryEvent.OutputTuple,
      SendToTreasuryEvent.OutputObject
    >;

    "Withdraw(address,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
